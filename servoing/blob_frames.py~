#!/usr/bin/python

# Standard imports
import sys
import cv2
import numpy as np
sys.path.append('../')
#import drive
blob_y_value = 0

    #cv2.namedWindow(win_name, cv2.WINDOW_NORMAL)
    #cv2.setMouseCallback(win_name,onmouse)
    #cv2.createTrackbar('H Low', win_name,0,255,dummy)
    #read trackbar positions for all
    #hul=cv2.getTrackbarPos('H Low', win_name)
    
def detect_object(image, res):
    res = cv2.cvtColor(res,cv2.COLOR_BGR2GRAY)
    cv2.imshow("GRAY",res)
    cnts, hierarchy = cv2.findContours(res,cv2.RETR_TREE,cv2.CHAIN_APPROX_NONE)
    area = np.array([cv2.contourArea(k) for k in cnts])
    #print("AREA",area)
    cnts = np.array(cnts)[np.logical_and(area>10, area<100000)].tolist()
    area = area[np.logical_and(area>10, area<100000)]
    
    mask2 = np.zeros(res.shape)
    cv2.drawContours(mask2,cnts,-1,(255,255,255),-1)
    image_copy = np.copy(image)
    for cnt in np.arange(len(cnts)):
        rect = cv2.boundingRect(cnts[cnt])
        x,y,w,h = rect
        centre_x = int(x + (w / 2))
        centre_y = int(y + (h / 2))
#            print w,h
        cv2.rectangle(res,(centre_x-10,centre_y-10),(centre_x+10,centre_y+10),(255,0,0),2)
    cv2.imshow("CONTOURS", res)
    return image_copy, len(cnts)

def main():
    # Setup SimpleBlobDetector parameters.
    detector = create_detector()

    # define HSV color thresholds
    hsv_low = np.array([140,100,180])
    hsv_high = np.array([180,255,255])

    # open video captureing
    cap = cv2.VideoCapture(-1)

    # capture, detect, display until quit signal
    capturing = True
    while capturing:
        _, frame = cap.read()
        im = cv2.resize(frame,(480,270))
        hsv_image = cv2.cvtColor(im, cv2.COLOR_BGR2HSV)
        mask = cv2.inRange(hsv_image,hsv_low, hsv_high)
        cv2.imshow("MASK",mask)
        res = cv2.bitwise_and(im, im, mask = mask)
        #res = cv2.bitwise_not(res)
        cv2.imshow("MASKED IMAGE",res)
        image_copy,count = detect_object(im,res)
        #font = cv2.FONT_HERSHEY_SIMPLEX
        #cv2.putText(image_copy,'frame %s Count %s' %(frame,count),(10,50), font, 1,(255,255,0),1)
        #cv2.imshow('Video',image_copy)

        #keypointsC = detector.detect(hsv)
        #print(len(keypointsC),keypointsC)

        # Draw detected blobs as red c ircles.
        # cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS ensures
        # the size of the circle corresponds to the size of blob

        #im_with_keypoints = cv2.drawKeypoints(hsv, keypointsC, np.array([]), (0,0,255), cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)

        #Show blobs
        #cv2.imshow("Keypoints Color", im_with_keypoints)
            
        #detect_object(im,mask)
        
        # Detect blobs.
        #keypoints = detector.detect(mask)

        # Draw detected blobs as red c ircles.
        # cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS ensures
        # the size of the circle corresponds to the size of blob

        #im_with_keypoints = cv2.drawKeypoints(mask, keypoints, np.array([]), (0,0,255), cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)

        #Show blobs
        #cv2.imshow("Keypoints", im_with_keypoints)
        key = cv2.waitKey(5)
        print("***************************",key)
        if key == ord('q'):
            print("***** pressed q*****")
            capturing = False
        # END WHILE LOOP capture, detect, display
        
    cap.release()   
    cv2.destroyAllWindows()


def create_detector():
    params = cv2.SimpleBlobDetector_Params()
    
    # Change thresholds
    params.minThreshold = 0
    params.maxThreshold = 255

    # by color
    params.filterByColor = False
    params.blobColor = 160

    # Filter by Area.
    params.filterByArea = True
    params.minArea = 100
    params.maxArea = 80000

    # Filter by Circularity
    params.filterByCircularity = True
    params.minCircularity = 0.5

    # Filter by Convexity
    params.filterByConvexity = False
    params.minConvexity = 0.01
            
    # Filter by Inertia
    params.filterByInertia = False
    params.minInertiaRatio = 0.1
        
    ver = (cv2.__version__).split('.')
    if int(ver[0]) < 3 :
        detector = cv2.SimpleBlobDetector(params)
    else : 
        detector = cv2.SimpleBlobDetector_create(params)

    return detector

    
if __name__ == '__main__':
    main()
    
